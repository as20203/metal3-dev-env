---
  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ CONTROL_PLANE_MACHINE_COUNT|int +  WORKER_MACHINE_COUNT|int }}"

  - name: Wait until cluster becomes provisioned.
    k8s_info:
      api_version: cluster.x-k8s.io/{{ CAPI_VERSION }}
      kind: Cluster
      namespace: "{{ NAMESPACE }}"
      kubeconfig: "{{ kubeconfig }}"
    register: cluster
    retries: 100
    delay: 20
    until: (cluster is succeeded) and
           (cluster.resources | length > 0) and
           (cluster.resources[0].status.phase | default("none") | lower == "provisioned")

  - name: Wait until "{{ NUMBER_OF_BMH }}" BMHs become provisioned.
    kubernetes.core.k8s_info:
      api_version: metal3.io/v1alpha1
      kind: BareMetalHost
      namespace: "{{ NAMESPACE }}"
      kubeconfig: "{{ kubeconfig }}"
    register: bmh
    retries: 200
    delay: 30
    vars:
      query: "[? status.provisioning.state=='provisioned']"
    until: (bmh is succeeded) and
           (bmh.resources | length > 0) and
           (bmh.resources | json_query(query) | length ==  (NUMBER_OF_BMH | int))

  - name: Wait until "{{ NUMBER_OF_BMH }}" metal3machines become ready.
    kubernetes.core.k8s_info:
      api_version: infrastructure.cluster.x-k8s.io/{{ CAPM3_VERSION }}
      kind: Metal3Machine
      namespace: "{{ NAMESPACE }}"
      kubeconfig: "{{ kubeconfig }}"
    register: m3m
    retries: 60
    delay: 10
    vars:
      # Note: the 'ready' field is a boolean (not a string)
      query: "[? status.ready]"
    until: (m3m is succeeded) and
           (m3m.resources | length > 0) and
           (m3m.resources | json_query(query) | length == (NUMBER_OF_BMH | int))

  - name: Wait until "{{ NUMBER_OF_BMH }}" machines become running.
    k8s_info:
      api_version: cluster.x-k8s.io/{{ CAPI_VERSION }}
      kind: Machine
      namespace: "{{ NAMESPACE }}"
      kubeconfig: "{{ kubeconfig }}"
    register: machines
    retries: 150
    delay: 20
    vars:
      query: "[? status.phase=='running' || status.phase=='Running']"
    until: (machines is succeeded) and
           (machines.resources | length > 0) and
           (machines.resources | json_query(query) | length == (NUMBER_OF_BMH | int))
