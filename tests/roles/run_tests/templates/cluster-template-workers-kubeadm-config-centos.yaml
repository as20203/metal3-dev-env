# CentOS specific worker kubeadm config
preKubeadmCommands:
  - systemctl restart NetworkManager.service
  - nmcli connection load /etc/NetworkManager/system-connections/eth0.nmconnection
  - nmcli connection up /etc/NetworkManager/system-connections/eth0.nmconnection
  - nmcli connection load /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
  - nmcli connection up /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
  - systemctl enable --now crio kubelet
{% if EXTERNAL_VLAN_ID != "" %}
  - nmcli connection load /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
  - nmcli connection up /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
{% endif %}
files:
  - path: /usr/local/bin/retrieve.configuration.files.sh
    owner: root:root
    permissions: '0755'
    content: |
        #!/bin/bash
        set -e
        url="$1"
        dst="$2"
        filename="$(basename $url)"
        tmpfile="/tmp/$filename"
        curl -sSL -w "%{http_code}" "$url" | sed "s:/usr/bin:/usr/local/bin:g" > /tmp/"$filename"
        http_status=$(cat "$tmpfile" | tail -n 1)
        if [ "$http_status" != "200" ]; then
          echo "Error: unable to retrieve $filename file";
          exit 1;
        else
          cat "$tmpfile"| sed '$d' > "$dst";
        fi
  - path: /etc/NetworkManager/system-connections/eth0.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=eth0
      type=ethernet
      interface-name=eth0
      master={{ IRONIC_ENDPOINT_BRIDGE }}
      slave-type=bridge
      autoconnect-priority=999
      autoconnect-retries=50
  - path: /etc/NetworkManager/system-connections/{{ IRONIC_ENDPOINT_BRIDGE }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id={{ IRONIC_ENDPOINT_BRIDGE }}
      type=bridge
      interface-name={{ IRONIC_ENDPOINT_BRIDGE }}
      autoconnect-retries=50
      autoconnect-slaves=1
      autoconnect-priority=999

      [bridge]
      stp=false

      [ipv4]
      address1={{ "{{ ds.meta_data.provisioningIP }}" }}/{{ "{{ ds.meta_data.provisioningCIDR }}" }}
      method=manual

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
  - path: /etc/yum.repos.d/kubernetes.repo
    owner: root:root
    permissions: '0644'
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      enabled=1
      gpgcheck=1
      repo_gpgcheck=0
      gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  - path : /etc/containers/registries.conf
    owner: root:root
    permissions: '0644'
    content: |
      [registries.search]
      registries = ['docker.io']

      [registries.insecure]
      registries = ['{{ REGISTRY }}']
{% if EXTERNAL_VLAN_ID != "" %}
  - path: /etc/NetworkManager/system-connections/eth0.{{ EXTERNAL_VLAN_ID }}.nmconnection
    owner: root:root
    permissions: '0600'
    content: |
      [connection]
      id=Vlan eth0.{{ EXTERNAL_VLAN_ID }}
      type=vlan
      autoconnect-priority=999
      interface-name=eth0.{{ EXTERNAL_VLAN_ID }}

      [vlan]
      flags=1
      id=3
      parent=eth0

      [ipv4]
      method=auto

      [ipv6]
      addr-gen-mode=eui64
      method=ignore
{% endif %}
